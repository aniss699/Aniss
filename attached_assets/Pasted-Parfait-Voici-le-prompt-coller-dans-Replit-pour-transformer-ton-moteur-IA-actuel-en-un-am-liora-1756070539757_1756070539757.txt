Parfait. Voici le prompt √† coller dans Replit pour transformer ton ‚Äúmoteur IA‚Äù actuel en un am√©liorateur d‚Äôannonces 2.0 avec actions tangibles (r√©√©criture profonde, standardisation, suggestions prix/d√©lais, questions manquantes, uplift LOC, application en 1 clic, historique, et UI simple).

‚∏ª

üß† PROMPT REPLIT ‚Äî Moteur IA d‚Äôam√©lioration d‚Äôannonces 2.0 (actions tangibles)

Tu es un assistant IA full‚Äëstack.
Dans mon repo actuel, remplace/am√©liore le moteur ‚ÄúIA‚Äù des annonces pour qu‚Äôil fournisse une version am√©lior√©e exploitable des annonces publi√©es, avec endpoints, pages, boutons, tests, m√©triques.
Langue: FR. Pas d‚ÄôAPI payantes requises.

0) Objectif

√Ä partir d‚Äôune annonce publi√©e (Project), le moteur doit :
	1.	R√©√©crire profond√©ment (titre + r√©sum√© + crit√®res d‚Äôacceptation) et standardiser (cat√©gorie, sous‚Äëcat√©gorie, t√¢ches, livrables, skills, contraintes).
	2.	Proposer prix/d√©lais r√©alistes (min/med/max + d√©lai) + justifications.
	3.	D√©tecter manques ‚Üí questions cibl√©es.
	4.	Calculer BriefQualityScore, RichnessScore, LOC_base + uplift recommand√© (+budget, +jours).
	5.	Appliquer en 1 clic les suggestions au Project (budget/d√©lais/labels) et journaliser un changelog.
	6.	Impacter le scoring (qualit√©/fit/temps/loc/risk) et la mise en avant.

1) Sch√©ma & persistance

Cr√©er/valider table ProjectStandardization (si pas existante) :
	‚Ä¢	project_id FK, title_std, summary_std, acceptance_criteria text[],
	‚Ä¢	category_std, sub_category_std, tags_std string[],
	‚Ä¢	tasks_std jsonb[], deliverables_std jsonb[],
	‚Ä¢	skills_std string[], constraints_std string[],
	‚Ä¢	brief_quality_score float (0‚Äì1), richness_score float (0‚Äì1),
	‚Ä¢	missing_info jsonb[],
	‚Ä¢	price_suggested_min/med/max int (cents), delay_suggested_days int,
	‚Ä¢	loc_base float, loc_uplift_reco jsonb {new_budget, new_delay, delta_loc},
	‚Ä¢	rewrite_version string, created_at, updated_at.

Cr√©er table ProjectChangeLog :
	‚Ä¢	id, project_id, before jsonb, after jsonb, applied_by (system/user), reason string, created_at.

2) Microservice ML (FastAPI) ‚Äì moteur d‚Äôam√©lioration

Ajouter/renforcer modules (offline OK, embeddings locaux optionnels ; sinon BM25/TF‚ÄëIDF) :
	‚Ä¢	text_normalizer.py : nettoyage FR, unit√©s (m¬≤, h, pages, km), extraction quantit√©s/contraintes.
	‚Ä¢	taxonomizer.py : mapping cat√©gorie/sous‚Äëcat√©gorie/skills/tags via r√®gles + BM25.
	‚Ä¢	template_rewriter.py : r√©√©criture structur√©e (templates par cat√©gorie) ‚Üí title_std, summary_std (5‚Äì7 phrases), acceptance_criteria (SMART).
	‚Ä¢	brief_quality.py : brief_quality_score, richness_score, missing_info (questions concr√®tes).
	‚Ä¢	price_time_suggester.py : price_suggested_{min,med,max}, delay_suggested_days + rationale (s‚Äôappuie sur PRM quantiles + ajustements qualit√©/on‚Äësite/raret√©).
	‚Ä¢	loc.py (+ loc_uplift.py) : loc_base + recommandation {new_budget,new_delay,delta_loc}.

Endpoints ML
	‚Ä¢	POST /improve {project} ‚Üí renvoie l‚Äôobjet complet standardis√© + scores + suggestions + uplift + reasons.
	‚Ä¢	POST /brief/recompute {project_id, answers[]} ‚Üí met √† jour standardisation/scores apr√®s r√©ponses.

Toutes les sorties incluent breakdown / reasons[] + model_version.

3) API (Fastify) ‚Äì actions tangibles

Cr√©er/mettre √† jour :
	‚Ä¢	POST /ai/projects/:id/improve
‚ûú appelle /improve, persiste ProjectStandardization, retourne la version am√©lior√©e + diffs vs original.
	‚Ä¢	POST /ai/projects/:id/brief/complete {answers:[{question_id,value}],apply?:boolean}
‚ûú met √† jour standardisation et recalcule prix/d√©lais/LOC.
	‚Ä¢	GET  /ai/projects/:id/preview
‚ûú renvoie pr√©visualisation : texte r√©√©crit, crit√®res, prix/d√©lais sugg√©r√©s, scores (quality/richness/loc), questions manquantes, diff titre/desc.
	‚Ä¢	POST /ai/projects/:id/apply {apply_budget?:'min'|'med'|'max', apply_delay?:boolean, apply_title?:boolean, apply_summary?:boolean}
‚ûú applique suggestions au Project (maj budget/d√©lais/titre/desc), enregistre ProjectChangeLog, recalcule scoring.
	‚Ä¢	GET  /projects/:id/changelog ‚ûú historique des applications IA.

Garder existants : /ai/projects/:id/price-ref, /ai/projects/:id/candidates, /projects/:id/loc.

4) Int√©gration scoring & mise en avant

Dans packages/core/scoring.ts :
	‚Ä¢	Booster QualityScore/FitScore avec brief_quality_score & richness_score :

QualityScore' = QualityScore * (1 + 0.20*(brief_quality_score - 0.5))
FitScore'     = FitScore     * (1 + 0.15*(richness_score      - 0.5))


	‚Ä¢	Si missing_info.length>0 ‚ûú Risk += 0.05, TimeScore -= 0.03.
	‚Ä¢	LOC: utiliser loc_base et, si apply a augment√© budget/d√©lai, mettre √† jour LOCScore.
	‚Ä¢	GET /ai/projects/:id/candidates doit refl√©ter ces ajustements dans le breakdown.

5) UI minimaliste (SSR) ‚Äì pages & boutons

Ajouter templates (sans framework) + routes GET :
	‚Ä¢	/projects/:id/improve
	‚Ä¢	Colonne gauche : annonce d‚Äôorigine.
	‚Ä¢	Colonne droite : version am√©lior√©e (titre, r√©sum√©, crit√®res, t√¢ches, livrables, skills, contraintes).
	‚Ä¢	Cartes Prix (min/med/max), D√©lais, BriefQuality, Richness, LOC (base/uplift).
	‚Ä¢	Questions manquantes (form POST /ai/projects/:id/brief/complete).
	‚Ä¢	Boutons : ‚ÄúAppliquer (budget m√©dian + d√©lais)‚Äù ‚Üí POST /ai/projects/:id/apply,
‚ÄúAppliquer le texte (titre + r√©sum√©)‚Äù, ‚ÄúRecalculer apr√®s r√©ponses‚Äù.
	‚Ä¢	/projects/:id/changelog : liste des modifications (diffs) avec date et raison.

Textes FR pr√™ts (placeholders) :
	‚Ä¢	‚ÄúNous avons clarifi√© votre annonce, ajout√© des crit√®res d‚Äôacceptation, et propos√© un budget/d√©lai r√©alistes.‚Äù
	‚Ä¢	‚ÄúImpact estim√© sur la probabilit√© d‚Äôaboutissement : +{ŒîLOC}%.‚Äù

6) M√©triques & KPIs
	‚Ä¢	Ajouter √† /admin/metrics :
	‚Ä¢	% d‚Äôannonces am√©lior√©es, ŒîBriefQuality, ŒîRichness, ŒîLOC,
	‚Ä¢	TTFB (Time‚Äëto‚ÄëFirst‚ÄëBid) avant/apr√®s am√©lioration,
	‚Ä¢	Award rate des annonces am√©lior√©es vs non am√©lior√©es,
	‚Ä¢	Apply rate (suggestions appliqu√©es).

7) Tests

Unit (Vitest/pytest)
	‚Ä¢	template_rewriter (format, champs obligatoires), brief_quality (scores/qs manquantes), price_time_suggester (coh√©rence), loc_uplift (delta > 0 sur sc√©narios).
	‚Ä¢	scoring (ajustements quality/fit/risk/time).
E2E (supertest)

	1.	POST /ai/projects/:id/improve ‚Üí re√ßoit version am√©lior√©e compl√®te + persistance OK.
	2.	GET /ai/projects/:id/preview ‚Üí affiche diff & scores.
	3.	POST /ai/projects/:id/apply (budget=med, delay=true, title=true, summary=true) ‚Üí Project modifi√© + entr√©e ProjectChangeLog.
	4.	GET /ai/projects/:id/candidates ‚Üí breakdown int√®gre les ajustements.
	5.	KPIs /admin/metrics ‚Üí compteurs mis √† jour.

8) README (FR)
	‚Ä¢	‚ÄúActiver l‚Äôam√©lioration IA en 3 √©tapes‚Äù :
	1.	POST /ai/projects/:id/improve
	2.	GET  /ai/projects/:id/preview
	3.	POST /ai/projects/:id/apply
	‚Ä¢	Exemples curl ci‚Äëdessous + captures textuelles.

9) Definition of Done
	‚Ä¢	Le moteur IA produit une version am√©lior√©e exploitable (r√©√©criture + standardisation + prix/d√©lais + questions + LOC uplift) et la persiste.
	‚Ä¢	Des endpoints et pages permettent de pr√©visualiser et appliquer les suggestions en 1 clic.
	‚Ä¢	Les scores et la mise en avant refl√®tent les am√©liorations.
	‚Ä¢	Changelog consultable.
	‚Ä¢	Tests verts, KPIs expos√©s, README mis √† jour.

‚∏ª

5 cURL pour v√©rifier

# 1) Am√©liorer une annonce publi√©e
curl -X POST http://localhost:3000/ai/projects/<ID>/improve -H "Content-Type: application/json" -d '{}'

# 2) Pr√©visualiser la version am√©lior√©e + diffs
curl http://localhost:3000/ai/projects/<ID>/preview

# 3) R√©pondre aux questions manquantes (exemple)
curl -X POST http://localhost:3000/ai/projects/<ID>/brief/complete \
  -H "Content-Type: application/json" \
  -d '{"answers":[{"question_id":"surface_m2","value":"40"},{"question_id":"finition","value":"satin"}],"apply":false}'

# 4) Appliquer les suggestions IA (budget m√©dian + d√©lais + texte)
curl -X POST http://localhost:3000/ai/projects/<ID>/apply \
  -H "Content-Type: application/json" \
  -d '{"apply_budget":"med","apply_delay":true,"apply_title":true,"apply_summary":true}'

# 5) Voir l‚Äôhistorique des changements
curl http://localhost:3000/projects/<ID>/changelog

‚Äî Fin du prompt.