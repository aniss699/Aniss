Parfait ‚úÖ
Voici ton prompt complet √† copier-coller dans Replit. Il inclut toute la logique du projet + la contrainte 100% offline (aucun appel externe).

‚∏ª

üìã PROMPT REPLIT ‚Äî Projet complet IA (offline, appels d‚Äôoffres invers√©s + mise en relation)

Tu es un assistant IA full-stack.
Ta mission : g√©n√©rer un monorepo complet, ex√©cutable localement (Docker), en mode 100% offline (aucun appel externe), pour une plateforme fran√ßaise d‚Äôappels d‚Äôoffres invers√©s + mise en relation payante.

Le code doit √™tre complet, typ√©, test√©, document√© (FR), pr√™t en 1 seule commande.

‚∏ª

üéØ Objectif produit
	‚Ä¢	Concept : ¬´ Le client fait le prix ¬ª.
	‚Ä¢	Deux volets :
	1.	Appels d‚Äôoffres invers√©s (clients publient besoins ‚Üí prestataires ench√©rissent √† la baisse).
	2.	Mise en relation payante :
	‚Ä¢	R√©servation de cr√©neaux (calendrier + paiement).
	‚Ä¢	Introductions cibl√©es (le client propose un prix pour contacter une personne pr√©cise).
	‚Ä¢	IA c≈ìur (diff√©renciation) :
	‚Ä¢	Compr√©hension du besoin (NLP / embeddings locaux ou fallback BM25).
	‚Ä¢	R√©f√©rence de prix IA (r√©gression quantile + r√®gles).
	‚Ä¢	Ench√®re invers√©e guid√©e (nudges dynamiques, anti-dumping).
	‚Ä¢	Scoring multi-objectif explicable (prix, qualit√©, fit, d√©lai, risque, LOC).
	‚Ä¢	Probabilit√© d‚Äôaboutissement (LOC) pour projets, r√©servations et intros.
	‚Ä¢	D√©tection d‚Äôabus (collusion, dumping, spam) via graphe + IsolationForest.
	‚Ä¢	Apprentissage continu (r√©-entrainement local).

‚∏ª

üõ†Ô∏è Stack & Structure
	‚Ä¢	/apps/api : Node 20, TypeScript, Fastify, Prisma (Postgres), Zod, OpenAPI, WS.
	‚Ä¢	/apps/ml : Python 3.11, FastAPI, scikit-learn, LightGBM, sentence-transformers (offline), networkx.
	‚Ä¢	/apps/worker : Node, BullMQ (Redis), jobs (prepare, retrain, recalc, payouts).
	‚Ä¢	/packages/core : scoring (TS), constantes, types partag√©s.
	‚Ä¢	/infra : docker-compose.yml, init.sql.
	‚Ä¢	/tests : unit (Vitest, pytest), e2e (supertest), load (k6).
	‚Ä¢	/models/ : tous les poids ML locaux (aucun t√©l√©chargement).

Commande unique :

docker-compose up --build


‚∏ª

üîí Mode 100% OFFLINE
	‚Ä¢	Interdiction totale d‚Äôappels HTTP externes.
	‚Ä¢	Variables d‚Äôenv obligatoires :

OFFLINE_MODE=true
NO_EXTERNAL_CALLS=true
TRANSFORMERS_OFFLINE=1
HF_HUB_OFFLINE=1


	‚Ä¢	Tous les mod√®les (embeddings, LightGBM, sklearn) sont charg√©s **depuis /models/** uniquement.
	‚Ä¢	Fallback BM25/TF-IDF si aucun mod√®le dispo.
	‚Ä¢	Tests doivent √©chouer si un appel sortant est tent√©.

‚∏ª

üóÑÔ∏è Sch√©ma (Prisma)

Inclure tables pour :
	‚Ä¢	Users, ProviderProfile, ClientProfile, Project, Bid, MatchFeature, AbuseSignal, EventLog, ModelVersion.
	‚Ä¢	Mise en relation : PersonProfile, AvailabilitySlot, Booking, IntroRequest, ContactOffer, Payment, Payout.

‚∏ª

üîå API (Fastify, FR)
	‚Ä¢	Projets / ench√®res : CRUD projets/bids, IA (prepare, price-ref, candidates, auction/start, explain, loc).
	‚Ä¢	R√©servations : cr√©er profil, slots, bookings (avec prix sugg√©r√© + LOC), confirm/cancel.
	‚Ä¢	Introductions : cr√©er intro (prix propos√©, calcul prix sugg√©r√© + LOC), accept/decline/complete.
	‚Ä¢	Recommandations : clients ‚Üí personnes, personnes ‚Üí prospects.
	‚Ä¢	Abus : /ai/abuse/:entity/:id.
	‚Ä¢	Admin : /admin/ml/retrain, /admin/metrics.
	‚Ä¢	WS : ench√®res (/ws/auction/:projectId), calendrier (/ws/schedule/:personId), intros (/ws/intro/:personId).

Toutes les r√©ponses IA renvoient breakdown explicable (FR).

‚∏ª

ü§ñ Microservice ML (FastAPI)

Modules √† impl√©menter :
	‚Ä¢	embedder.py : embeddings locaux (/models/embeddings/**) ou fallback BM25.
	‚Ä¢	ranker.py : LightGBM scoring offres (projets‚Üîprestataires).
	‚Ä¢	auction.py : r√©f√©rence prix IA (quantile), r√®gles nudges, anti-dumping.
	‚Ä¢	loc.py : pr√©dire probabilit√© de succ√®s (projets, bookings, intros).
	‚Ä¢	pricing_intro.py : prix sugg√©r√© (quantile regression).
	‚Ä¢	rank_people.py : ranking personnes (mise en relation).
	‚Ä¢	abuse.py : d√©tection collusion/dumping/spam.

Tous les mod√®les sont sauvegard√©s/charg√©s localement dans /models/**.

‚∏ª

üìä Scoring
	‚Ä¢	GlobalScore (ench√®res) : prix, qualit√©, fit, d√©lai, risque, LOC.
	‚Ä¢	PeopleScore (mise en relation) : fit, r√©putation, prix alignment, disponibilit√©, LOC_intro, risque.

Toujours retourner breakdown et reasons[].

‚∏ª

üì¶ Seeds & D√©mo
	‚Ä¢	‚â•60 providers, ‚â•40 projets, ‚â•200 bids (incluant dumping & collusion).
	‚Ä¢	‚â•50 personnes (mentors, d√©cideurs, experts, commerciaux) avec calendriers.
	‚Ä¢	‚â•120 bookings (inclure no-show).
	‚Ä¢	‚â•100 intros (accept√©es/refus√©es).

Cas testables :
	1.	Projet peinture (budget trop bas ‚Üí LOC faible).
	2.	Ench√®re avec collusion ‚Üí abus d√©tect√©.
	3.	R√©servation slot ‚Üí prix sugg√©r√© + LOC_booking affich√©s.
	4.	Intro avec prix trop bas ‚Üí prix sugg√©r√© + LOC_intro + explication.

‚∏ª

üß™ Tests
	‚Ä¢	Unit (Vitest/pytest) : scoring, LOC, pricing_intro, rank_people, auction, abuse.
	‚Ä¢	E2E (supertest) : parcours complet projets, r√©servations, intros.
	‚Ä¢	Load (k6) : 100 utilisateurs concurrents.
	‚Ä¢	Offline tests : √©chouer si HTTP sortant.

‚∏ª

üìà Admin / Observabilit√©
	‚Ä¢	/admin/metrics ‚Üí NDCG@5, award rate, dispersion prix, LOC moyens, conversion r√©servations/intros, taux de satisfaction, flags abus.
	‚Ä¢	Logs Pino JSON + EventLog versionn√©.

‚∏ª

‚úÖ Definition of Done
	‚Ä¢	docker-compose up --build d√©marre sans Internet.
	‚Ä¢	API + ML + Worker + DB + Redis OK.
	‚Ä¢	Price-ref, ench√®re invers√©e, LOC, r√©servations, intros fonctionnent.
	‚Ä¢	Explicabilit√© visible partout.
	‚Ä¢	Anti-dumping & collusion d√©tect√©s.
	‚Ä¢	Tests unitaires ‚â•80% passent.
	‚Ä¢	README (FR) complet avec commandes cURL.

‚∏ª

üëâ Directive finale

G√©n√®re maintenant le projet complet conforme √† ces sp√©cifications, en garantissant le mode 100% offline (aucun appel externe).

‚∏ª

Veux-tu que je t‚Äôajoute aussi une mini-section front HTML statique (formulaires simples pour tester manuellement les parcours) dans ce prompt, ou tu pr√©f√®res rester full API ?