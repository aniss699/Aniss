Mets en place un pr√©-lancement automatique pour Vite afin de fiabiliser la Preview.
Objectif : ex√©cuter un script ‚Äúpreflight‚Äù avant chaque npm run dev qui :
	1.	nettoie le cache utile si n√©cessaire,
	2.	v√©rifie la config Vite (allowedHosts),
	3.	contr√¥le les versions/outils et les erreurs types (TS, imports‚Ä¶),
	4.	relance proprement le serveur.

Modifs √† faire

1) Cr√©er scripts/prepreview.sh

Contenu exact :

#!/usr/bin/env bash
set -euo pipefail

echo "üîé Preflight preview‚Ä¶"

# 1) Node >= 18
if command -v node >/dev/null 2>&1; then
  NODE_MAJ=$(node -p "process.versions.node.split('.')[0]")
  if [ "$NODE_MAJ" -lt 18 ]; then
    echo "‚ùå Node < 18 d√©tect√©. Merci d‚Äôinstaller Node 18+."
    exit 1
  fi
else
  echo "‚ùå Node non trouv√©."
  exit 1
fi

# 2) Installer deps si node_modules absent/incomplet
if [ ! -d node_modules ]; then
  echo "üì¶ Installation des d√©pendances‚Ä¶"
  npm install
fi

# 3) Nettoyage cache conditionnel si lockfile chang√©
mkdir -p .cache
HASH_NOW=""
if [ -f package-lock.json ]; then HASH_NOW=$(sha256sum package-lock.json | awk '{print $1}'); fi
if [ -f yarn.lock ]; then HASH_NOW=$(sha256sum yarn.lock | awk '{print $1}'); fi
if [ -f pnpm-lock.yaml ]; then HASH_NOW=$(sha256sum pnpm-lock.yaml | awk '{print $1}'); fi

if [ -n "$HASH_NOW" ]; then
  if [ ! -f .cache/lock.hash ] || [ "$(cat .cache/lock.hash)" != "$HASH_NOW" ]; then
    echo "üßπ Lockfile modifi√© ‚Üí purge caches Vite."
    rm -rf node_modules/.vite .vite dist
    echo "$HASH_NOW" > .cache/lock.hash
  fi
fi

# 4) V√©rifier vite.config.js: allowedHosts
if [ -f vite.config.js ]; then
  if ! grep -q "allowedHosts" vite.config.js; then
    echo "‚öôÔ∏è Ajout de server.allowedHosts √† vite.config.js"
    # Injection minimaliste non destructive : ajoute un bloc server s‚Äôil n‚Äôexiste pas
    node - <<'JS'
const fs = require('fs');
let s = fs.readFileSync('vite.config.js','utf8');
if(!/server\s*:\s*\{[^}]*\}/s.test(s)){
  s = s.replace(/export default defineConfig\(\{?/,'export default defineConfig({\n  server: { allowedHosts: [".replit.dev"] },');
}else if(!/allowedHosts/.test(s)){
  s = s.replace(/server\s*:\s*\{([\s\S]*?)\}/, (m, inner) => `server: { ${inner.trim().replace(/,+$/,'')}, allowedHosts: [".replit.dev"] }`);
}
fs.writeFileSync('vite.config.js', s);
console.log('vite.config.js mis √† jour');
JS
  fi
fi

# 5) V√©rifs de base (silencieuses si non install√©es)
if npx --yes tsc --version >/dev/null 2>&1; then
  echo "üß™ TypeScript check‚Ä¶"
  npx --yes tsc --noEmit || { echo "‚ùå Erreurs TypeScript"; exit 1; }
fi

# 6) D√©tection d‚Äôimports cass√©s via esbuild (rapide) si pr√©sent
if npx --yes esbuild --version >/dev/null 2>&1; then
  if [ -f src/main.tsx ] || [ -f src/main.ts ]; then ENTRY=$( [ -f src/main.tsx ] && echo src/main.tsx || echo src/main.ts ); else ENTRY=src/index.tsx; fi
  if [ -f "$ENTRY" ]; then
    echo "üîó Check imports (esbuild)‚Ä¶"
    npx --yes esbuild "$ENTRY" --bundle --platform=browser --outfile=/dev/null || { echo "‚ùå Import cass√©"; exit 1; }
  fi
fi

# 7) Purge HMR zombie
pkill -f "vite" >/dev/null 2>&1 || true

echo "‚úÖ Preflight OK"

2) Cr√©er scripts/run-dev.sh

Contenu exact :

#!/usr/bin/env bash
set -euo pipefail
bash scripts/prepreview.sh
# Relance Vite en mode dev
if npx --yes vite --version >/dev/null 2>&1; then
  npx --yes vite
else
  npm run dev-original
fi

3) Mettre les deux scripts ex√©cutables

chmod +x scripts/prepreview.sh scripts/run-dev.sh

4) Mettre √† jour package.json
	‚Ä¢	Sauvegarder l‚Äôancien script dev sous dev-original si besoin
	‚Ä¢	Forcer l‚Äôex√©cution du pr√©flight avant chaque preview/dev

{
  "scripts": {
    "dev-original": "vite",
    "predev": "bash scripts/prepreview.sh",
    "dev": "bash scripts/run-dev.sh",
    "build": "vite build",
    "preview": "vite preview"
  }
}

predev est un hook npm standard : il s‚Äôex√©cute automatiquement avant npm run dev.
dev passe par run-dev.sh pour garantir que le pr√©flight tourne m√™me si la preview Replit ne d√©clenche pas le hook correctement.

5) (Optionnel) ESLint auto s‚Äôil est pr√©sent

Si eslint est install√©, ajoute dans package.json :

{
  "scripts": {
    "lint": "eslint . --ext .js,.jsx,.ts,.tsx"
  }
}

Et dans scripts/prepreview.sh, juste avant le ‚Äú‚úÖ Preflight OK‚Äù :

if npx --yes eslint --version >/dev/null 2>&1; then
  echo "üßπ Lint‚Ä¶"
  npx --yes eslint . --ext .js,.jsx,.ts,.tsx || true
fi

6) Mettre √† jour .replit (si n√©cessaire)

Assure que la commande de run utilise npm run dev :

run = "npm run dev"


‚∏ª

Crit√®res d‚Äôacceptation
	‚Ä¢	Lancer npm run dev ex√©cute toujours le pr√©flight.
	‚Ä¢	Si package-lock/yarn.lock/pnpm-lock.yaml change, les caches Vite sont purg√©s automatiquement.
	‚Ä¢	vite.config.js contient server.allowedHosts: ['.replit.dev'] si absent.
	‚Ä¢	Les erreurs TypeScript/imports cass√©s bloquent le lancement avec un message clair.
	‚Ä¢	Le serveur Vite se relance proprement sans processus zombie.
