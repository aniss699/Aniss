üß† PROMPT REPLIT ‚Äî Projet complet avec TOUTES les modifs d‚Äôaujourd‚Äôhui

(√Ä coller tel quel dans Replit Agent / Ghostwriter)

Tu es un assistant IA full‚Äëstack.
G√©n√®re / mets √† jour un monorepo ex√©cutable localement (Docker) pour une plateforme FR d‚Äôappels d‚Äôoffres invers√©s + mise en relation payante avec : standardisation d‚Äôannonces, matching & scoring explicables, ench√®re invers√©e guid√©e, LOC (probabilit√© d‚Äôaboutissement), anti‚Äëabus, sourcing web ‚Äúmode √âCO‚Äù (gratuit, sans cl√©s), fusion candidats internes + externes, et int√©gration compl√®te dans l‚ÄôAPI.
Code typ√©, test√©, document√© (FR). Une seule commande pour lancer.

‚∏ª

0) Param√®tres g√©n√©raux & env
	‚Ä¢	Langue par d√©faut : FR.
	‚Ä¢	Mode √âCO (gratuit) : pas d‚ÄôAPIs payantes, d√©couverte via RSS/Sitemap + crawler conforme (robots.txt + rate‚Äëlimit).
	‚Ä¢	.env minimal par d√©faut :

OFFLINE_MODE=false
NO_EXTERNAL_CALLS=false
DOMAIN_WHITELIST="*.gouv.fr, *.insee.fr, *.cci.fr, *.pagesjaunes.fr, *.github.io, *.notion.site, *.wordpress.com"
RATE_LIMIT_GLOBAL_RPS=2
RATE_LIMIT_PER_DOMAIN_RPS=1
USER_AGENT="TestMarketplaceBot/0.1 (+contact@exemple.fr)"

FEATURE_SOURCING=true
FEATURE_API_CONNECTORS=false
FEATURE_CRAWLER=true

EMBEDDINGS_ENABLED=false
BM25_ENABLED=true


	‚Ä¢	Possibilit√© future d‚Äôactiver des connecteurs API (Google CSE, Bing, SIRENE) via flags et cl√©s ‚Äî mais laisser d√©sactiv√© par d√©faut.

‚∏ª

1) Structure monorepo

/apps
  /api        # Node 20, TypeScript, Fastify, Prisma (Postgres), Zod, OpenAPI, WS
  /ml         # Python 3.11, FastAPI, scikit-learn, LightGBM, (sentence-transformers local optionnel)
  /worker     # Node, BullMQ (Redis) : jobs prepare/retrain/recalc/payouts/sourcing
  /ingestion  # (NOUVEAU) sourcing web : connectors, crawler, extractors, enrichers, scoring, jobs
/packages
  /core       # TS utils: scoring multi-objectif, fairness/diversity, exposure, ingestion helpers
  /schemas    # Prisma + Zod validators
/infra
  docker-compose.yml
  init.sql
  /data       # CSV locaux (cp_city_coords.csv, taxonomy_skills_fr.csv, price_terms_fr.csv)
/tests
  unit/ (Vitest + pytest)
/tests-e2e
  e2e/ (supertest)
/tests-load
  k6/ (sc√©narios simples)
README.md

Services Docker : api, ml, worker, ingestion (si s√©par√©), postgres, redis.
Commande unique : docker-compose up --build.

‚∏ª

2) Sch√©ma DB (Prisma) ‚Äî tables cl√©s & ajouts
	‚Ä¢	User(id, email unique, role:CLIENT|PRO|PERSON|ADMIN, rating_mean, rating_count, created_at)
	‚Ä¢	ProviderProfile, ClientProfile
	‚Ä¢	Project(‚Ä¶ , category, quality_target, risk_tolerance, geo_required, onsite_radius_km?, status, loc_score float)
	‚Ä¢	Bid(‚Ä¶, amount, timeline_days, message, score_breakdown jsonb, is_leading bool, flagged bool)
	‚Ä¢	MatchFeature, AbuseSignal, EventLog, ModelVersion

Standardisation d‚Äôannonces (NOUVEAU)
	‚Ä¢	ProjectStandardization(
project_id FK, title_std, summary_std, acceptance_criteria text[],
category_std, sub_category_std, tags_std string[],
tasks_std jsonb[], deliverables_std jsonb[],
skills_std string[], constraints_std string[],
brief_quality_score float, richness_score float,
missing_info jsonb[], price_suggested_min/med/max int,
delay_suggested_days int, loc_uplift_reco jsonb,
rewrite_version string, created_at, updated_at
)

Mise en relation (existant)
	‚Ä¢	PersonProfile, AvailabilitySlot, Booking, IntroRequest, ContactOffer, Payment, Payout

Sourcing Web (NOUVEAU)
	‚Ä¢	WebSource(domain unique, robots_txt jsonb, crawl_policy jsonb, last_ok_at, blocked bool)
	‚Ä¢	WebDoc(url unique, domain, type:HOME|ABOUT|SERVICES|PORTFOLIO|PRICING|CONTACT|OTHER, title, text_summary, lang, published_at?, fetched_at, etag?, hash, source_type:RSS|SITEMAP|CRAWL, meta jsonb)
	‚Ä¢	ExternalCompany(name, siren?, siret?, naf_code?, website?, emails[], phones[], address jsonb, city, postal_code, country, geo {lat,lng}?, social jsonb, raw_tags[], skills[], confidence float, first_seen_at, last_seen_at)
	‚Ä¢	ExternalCompanySignal(company_id FK, kind:PRICE|AVAILABILITY|PORTFOLIO|RATING|CLAIMED, payload jsonb, score float, seen_at)
	‚Ä¢	SourcingMatch(project_id FK, company_id FK, lead_score float, reasons jsonb, status:CANDIDATE|CONTACTED|REFUSED|CONVERTED, created_at)

Index : WebDoc.url unique, GIN jsonb sur skills/tags/meta, btree dates ; extension vector si dispo (optionnelle).

‚∏ª

3) Microservice ML (FastAPI, Python)

Existants √† maintenir
	‚Ä¢	embedder.py (option embeddings locaux) ‚Äî fallback BM25/TF‚ÄëIDF si EMBEDDINGS_ENABLED=false
	‚Ä¢	ranker.py : LightGBM r√©gressif pour GlobalScore (projets‚Üîprestataires)
	‚Ä¢	auction.py : Price Reference Model (quantiles q25/50/75) + r√®gles d‚Äôench√®re (min_decrement adaptatif, nudges FR, anti‚Äëdumping/co√ªt plancher)
	‚Ä¢	abuse.py : IsolationForest + r√®gles (BID/PROJECT/BOOKING/INTRO)
	‚Ä¢	loc.py : LOC (projet/booking/intro) + endpoint /loc/uplift (recommandations budget/d√©lais)

Nouveaux pour standardisation
	‚Ä¢	text_normalizer.py : nettoyage FR, normalisation unit√©s (m¬≤, h, pages, km), extraction quantit√©s/contraintes on‚Äësite/remote
	‚Ä¢	taxonomizer.py : mapping cat√©gorie/sous-cat√©gorie/skills via r√®gles + BM25 (z√©ro cl√©)
	‚Ä¢	template_rewriter.py : g√©n√©ration offline (templates) title_std, summary_std, acceptance_criteria
	‚Ä¢	brief_quality.py : brief_quality_score, richness_score, missing_info
	‚Ä¢	price_time_suggester.py : prix min/med/max via PRM + ajustements (quality_target, on‚Äësite, market_heat, raret√© skills) + delay_suggested_days
	‚Ä¢	loc_uplift.py : LOC_base, recommandations {new_budget,new_delay,delta_loc}

Endpoints ML
	‚Ä¢	POST /standardize ‚Üí (normalizer + taxonomizer + rewriter + quality + price_time + loc_uplift)
	‚Ä¢	POST /brief/recompute ‚Üí recalcul apr√®s r√©ponses aux missing_info
	‚Ä¢	(conserver) /rank, /auction/guide, /abuse/score, /loc/project|booking|intro, /pricing/intro, /rank/people

Toutes les r√©ponses retournent breakdown et/ou reasons[] + model_version.

‚∏ª

4) API (Fastify, FR)

Projets / ench√®res (existant +)
	‚Ä¢	POST /projects, GET /projects/:id, POST /projects/:id/publish
	‚Ä¢	POST /bids, GET /projects/:id/bids
	‚Ä¢	IA :
	‚Ä¢	POST /ai/projects/:id/prepare
	‚Ä¢	GET  /ai/projects/:id/price-ref ‚Üí {min, med, max, rationale}
	‚Ä¢	GET  /ai/projects/:id/candidates?diversity=true ‚Üí top‚ÄëK avec breakdown (fusion interne + sourcing)
	‚Ä¢	POST /ai/projects/:id/auction/start
	‚Ä¢	GET  /ai/bids/:id/explain
	‚Ä¢	GET  /projects/:id/loc (+ ?uplift=true retourne recommandations)

Standardisation d‚Äôannonce (NOUVEAU)
	‚Ä¢	POST /ai/projects/:id/standardize ‚Üí cr√©e/maj ProjectStandardization + suggestions prix/d√©lais + loc_uplift_reco + missing_info
	‚Ä¢	GET  /projects/:id/standardized
	‚Ä¢	POST /ai/projects/:id/brief/complete ‚Üí met √† jour la standardisation apr√®s r√©ponses ; recalc scores/prix/d√©lais/LOC
	‚Ä¢	GET  /ai/projects/:id/preview-scoring ‚Üí GlobalScore breakdown bas√© sur la version standardis√©e (avant publication)

Mise en relation (existant)
	‚Ä¢	Personnes, disponibilit√©s, bookings (LOC_booking) ; introductions (pricing_intro + LOC_intro)

Sourcing Web ‚ÄúMode √âCO‚Äù (NOUVEAU)
	‚Ä¢	POST /sourcing/discover {project_id, strategy:'rss|sitemap', max?} ‚Üí lance pipeline discover‚Üífetch‚Üíparse‚Üíextract‚Üíenrich‚Üíscore‚Üíindex
	‚Ä¢	GET  /sourcing/project/:id/candidates?min_score=0.4&limit=20 ‚Üí ExternalCompany tri√©es par SupplierLeadScore + reasons[]
	‚Ä¢	GET  /sourcing/status ‚Üí KPIs pipeline (pages crawl√©es, docs valides, entreprises extraites, temps m√©dian, domaines bloqu√©s)

WS
	‚Ä¢	/ws/auction/:projectId (ench√®res), /ws/schedule/:personId (agenda), /ws/intro/:personId (intros)

OpenAPI FR complet avec exemples.

‚∏ª

5) Scoring & int√©grations (packages/core)

GlobalScore (ench√®res) ‚Äî conserver + int√©grer standardisation :

GlobalScore = w_price*PriceScore
            + w_quality*QualityScore
            + w_fit*FitScore
            + w_time*TimeScore
            - w_risk*AbusePenalty
            + w_loc*LOCScore

	‚Ä¢	Ajouts standardisation :

QualityScore' = QualityScore * (1 + Œªq*(brief_quality_score - 0.5))
FitScore'     = FitScore     * (1 + Œªr*(richness_score      - 0.5))
if missing_info_count > 0: Risk += 0.05 ; TimeScore -= 0.03 (penalty soft)

Par d√©faut Œªq=0.20, Œªr=0.15.

	‚Ä¢	breakdown doit exposer brief_quality_adj, richness_adj, missing_info_count.

SupplierLeadScore (sourcing externes) :

SupplierLeadScore =
    w_fit*FitBM25(project_std.skills_std, company.skills)
  + w_geo*Geo(distance vs onsite_radius or remote_ok)
  + w_price*PriceAlign(company.price_signals, project.price_ref)
  + w_rep*ReputationSignal(PORTFOLIO|SERVICES d√©tect√©s)
  + w_fresh*Freshness(last_seen_at)
  - w_risk*RiskPenalty(dup/spam/incoh√©rences)

Poids initiaux {fit .40, geo .15, price .15, rep .15, fresh .10, risk .05}.

Fusion candidats : GET /ai/projects/:id/candidates combine
(1) prestataires internes (tri√©s par GlobalScore) et
(2) ExternalCompany (tri√©s par SupplierLeadScore normalis√©),
puis diversifie via MMR si ?diversity=true.

Autres utilitaires (d√©j√† pr√©sents ou √† compl√©ter) : exposure/pacing, fairness rerank, mmrDiversify.

‚∏ª

6) Sourcing Web ‚Äî pipeline (apps/ingestion)

Connectors (gratuits)
	‚Ä¢	rss_sitemap.ts : d√©couverte via /sitemap.xml, /rss, /feed (sur domaines whitelist√©s)

Crawler conforme
	‚Ä¢	robots.ts (respect robots.txt + cache), rate_limit.ts (global+par domaine),
	‚Ä¢	fetcher.ts (HTTP, ETag/Last-Modified, backoff 429/503),
	‚Ä¢	parser.ts (cheerio + Readability), normalize.ts (title/text_summary/lang/published_at/source)

Extractors
	‚Ä¢	company_parser.ts (nom, adresse, CP/ville, email RFC, tel E.164, SIREN/SIRET regex, NAF si pr√©sent)
	‚Ä¢	profile_parser.ts (services/skills/portfolio/tarifs ‚Üí price_signals)
	‚Ä¢	contact_parser.ts (liens social, formulaires)

Enrichers
	‚Ä¢	geo_enricher.ts (lookup local cp_city_coords.csv ‚Üí lat/lng)
	‚Ä¢	skill_inference.ts (BM25/TF‚ÄëIDF vs taxonomy_skills_fr.csv)
	‚Ä¢	price_signals.ts (‚Äú‚Ç¨/h‚Äù, ‚Äú‚Ç¨/jour‚Äù, ‚Äú√† partir de‚Äù, ‚Äúforfait‚Äù ‚Üí range indicative)

Scoring
	‚Ä¢	lead_scoring.ts (impl√©mentation exacte du SupplierLeadScore + reasons[])

Job
	‚Ä¢	jobs/discover_and_index.ts : orchestrer discover‚Üífetch‚Üíparse‚Üíextract‚Üíenrich‚Üíscore‚Üíindex (BullMQ)

‚∏ª

7) Standardisation ‚Üí d√©clenchement sourcing

√Ä la fin de POST /ai/projects/:id/standardize, lancer discover_and_index avec requ√™tes form√©es √† partir de :
<category_std> <skills_std[0..2]> <ville/r√©gion> mais restreint aux domaines de DOMAIN_WHITELIST.
Cr√©er SourcingMatch en CANDIDATE pour les premi√®res entreprises scor√©es.

‚∏ª

8) Tests & Seeds

Seeds
	‚Ä¢	/infra/data/ : cp_city_coords.csv, taxonomy_skills_fr.csv, price_terms_fr.csv.
	‚Ä¢	Projets de d√©mo (par vertical), prestataires internes, personnes (mise en relation), bookings/intros, WebDoc d‚Äôexemple (ou mini‚Äësite local simul√©) pour e2e.

Unit (Vitest/pytest)
	‚Ä¢	Standardisation : normalizer/taxonomizer/template_rewriter/brief_quality/price_time/loc_uplift
	‚Ä¢	Sourcing : robots/rate‚Äëlimit/parser/BM25/geo/price_signals/lead_scoring
	‚Ä¢	Scoring : QualityScore', FitScore', fusion candidats + MMR

E2E (supertest)
	1.	Standardiser projet ‚ÄúPeinture 40‚ÄØm¬≤ Lyon‚Äù ‚Üí missing_info + prix/d√©lais sugg√©r√©s + LOC_uplift
	2.	POST /sourcing/discover (sitemap) ‚Üí GET /sourcing/project/:id/candidates
	3.	GET /ai/projects/:id/candidates?diversity=true (fusion internes+externes)
	4.	Ench√®re guid√©e (anti‚Äëdumping), award
	5.	R√©servation/Intro (LOC_booking/LOC_intro) ‚Äî smoke

Load (k6)
	‚Ä¢	100 utilisateurs : standardize ‚Üí discover ‚Üí candidates ‚Üí bids

‚∏ª

9) Observabilit√© & KPIs
	‚Ä¢	/admin/metrics :
	‚Ä¢	BriefQualityScore moyen, Delta LOC post-standardisation, Time‚Äëto‚ÄëFirst‚ÄëBid,
	‚Ä¢	NDCG@5, Award Rate, % Winners ‚â† Lowest Price,
	‚Ä¢	Sourcing : pages crawl√©es, docs valides, entreprises extraites, match@K, temps m√©dian, domaines bloqu√©s.
	‚Ä¢	EventLog : tracer standardisation, sourcing, scoring, versions mod√®les.

‚∏ª

10) S√©curit√©, conformit√©, √©quit√©
	‚Ä¢	robots.txt respect√©, DOMAIN_WHITELIST obligatoire.
	‚Ä¢	Pas de PII sensible inutile ; toujours provenance (url, fetched_at, hash).
	‚Ä¢	Explicabilit√© : tous les scores exposent breakdown / reasons[].
	‚Ä¢	Fairness & diversit√© : MMR/fair‚Äërerank optionnels dans candidates.
	‚Ä¢	Rate‚Äëlimit + backoff + circuit‚Äëbreaker par domaine.

‚∏ª

11) README (FR)
	‚Ä¢	Setup .env, docker-compose up --build, routes majeures (cURL).
	‚Ä¢	Exemple complet : standardize ‚Üí discover ‚Üí candidates (sourcing) ‚Üí candidates fusionn√©s ‚Üí auction.
	‚Ä¢	Sections : ‚ÄúStandardisation d‚Äôannonces‚Äù, ‚ÄúSourcing web (Mode √âCO)‚Äù, ‚ÄúScoring explicable‚Äù, ‚ÄúLOC & uplift‚Äù, ‚ÄúMise en relation‚Äù, ‚ÄúAnti‚Äëabus‚Äù, ‚ÄúKPIs‚Äù.

‚∏ª

12) Definition of Done
	‚Ä¢	Le repo se lance en 1 commande.
	‚Ä¢	Standardisation produit titre/r√©sum√©/crit√®res/taxonomie/skills, prix & d√©lais sugg√©r√©s, missing_info, LOC_uplift.
	‚Ä¢	Sourcing web (RSS/Sitemap + crawler) retourne des ExternalCompany pertinents, scor√©s par SupplierLeadScore, visibles via /sourcing/project/:id/candidates.
	‚Ä¢	Candidats IA fusionnent internes + externes dans /ai/projects/:id/candidates (MMR si demand√©).
	‚Ä¢	Scoring inclut ajustements BriefQuality/Richness ; ench√®re guid√©e avec anti‚Äëdumping ; LOC exploit√© (et uplift).
	‚Ä¢	Tests unitaires & e2e ‚â•80% core, KPIs expos√©s, README FR clair.

G√©n√®re/Modifie maintenant tout le code, migrations, jobs, tests et doc pour satisfaire exactement ces sp√©cifications.