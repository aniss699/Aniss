üõ†Ô∏è PROMPT REPLIT (Ghostwriter) ‚Äî Fix ‚Äú404 Page Not Found ‚Äî Did you forget to add the page to the router?‚Äù

Tu es un assistant IA full‚Äëstack dans ce repo.
Diagnostique et corrige toutes les causes du 404 Router c√¥t√© front (React Router/Wouter), plus fallback serveur. Applique exactement ces actions et affiche un rapport final.

‚∏ª

0) D√©tection stack & pr√©requis
	1.	D√©tecte : react-router-dom (v6+) ou wouter.
	2.	Si aucun routeur trouv√©, installe react-router-dom v6:

npm i react-router-dom


	3.	V√©rifie que react et react-dom sont install√©s.

‚∏ª

1) Source de v√©rit√© des chemins (cr√©ation/√©crasement)

Cr√©e src/routes/paths.ts :

export const paths = {
  home: '/',
  missions: '/missions',
  missionNew: '/missions/new',
  missionDetail: (id = ':id') => `/missions/${id}`,
  projects: '/projects',
  projectNew: '/projects/new',
  projectDetail: (id = ':id') => `/projects/${id}`,
  notFound: '/404',
}


‚∏ª

2) Point d‚Äôentr√©e Router (BrowserRouter + Routes)
	‚Ä¢	Ouvre src/main.tsx (ou src/main.jsx/tsx) et impose :

import React from 'react'
import ReactDOM from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom'
import App from './App'
import './index.css'

const root = document.getElementById('root')
if (!root) throw new Error('#root introuvable')

ReactDOM.createRoot(root).render(
  <React.StrictMode>
    <BrowserRouter basename={import.meta.env.BASE_URL || '/'}>
      <App />
    </BrowserRouter>
  </React.StrictMode>
)

Si l‚Äôapp utilise createBrowserRouter, garde cette API mais assure que toutes les pages sont d√©clar√©es dans le route tree.

‚∏ª

3) D√©finition explicite des routes
	‚Ä¢	Ouvre/√©crase src/App.tsx :

import { Routes, Route, Navigate } from 'react-router-dom'
import { paths } from './routes/paths'
import Home from './pages/Home'
import Missions from './pages/missions/Missions'
import MissionNew from './pages/missions/MissionNew'
import MissionDetail from './pages/missions/MissionDetail'
import Projects from './pages/projects/Projects'
import ProjectNew from './pages/projects/ProjectNew'
import ProjectDetail from './pages/projects/ProjectDetail'
import NotFound from './pages/NotFound'

export default function App() {
  return (
    <Routes>
      <Route path={paths.home} element={<Home />} />

      <Route path={paths.missions} element={<Missions />} />
      <Route path={paths.missionNew} element={<MissionNew />} />
      <Route path={paths.missionDetail()} element={<MissionDetail />} />

      <Route path={paths.projects} element={<Projects />} />
      <Route path={paths.projectNew} element={<ProjectNew />} />
      <Route path={paths.projectDetail()} element={<ProjectDetail />} />

      {/* Compat anciennes URLs */}
      <Route path="/mes-missions" element={<Navigate to={paths.missions} replace />} />
      <Route path="/mission/new" element={<Navigate to={paths.missionNew} replace />} />
      <Route path="/project/new" element={<Navigate to={paths.projectNew} replace />} />
      <Route path="/mission/:id" element={<Navigate to="/missions/:id" replace />} />
      <Route path="/project/:id" element={<Navigate to="/projects/:id" replace />} />

      {/* 404 */}
      <Route path={paths.notFound} element={<NotFound />} />
      <Route path="*" element={<Navigate to={paths.notFound} replace />} />
    </Routes>
  )
}

	‚Ä¢	Cr√©e src/pages/NotFound.tsx :

export default function NotFound() {
  return (
    <div style={{padding:20,fontFamily:'system-ui'}}>
      <h2>Page introuvable</h2>
      <p>V√©rifiez l‚ÄôURL ou revenez √† l‚Äôaccueil.</p>
      <a href="/">Retour</a>
    </div>
  )
}

V√©rifie que chaque page import√©e (Home, Missions, MissionNew, MissionDetail, Projects, ProjectNew, ProjectDetail) existe et exporte par d√©faut un composant React.

‚∏ª

4) Auto‚Äëfix des pages non mont√©es (codemod)

Cr√©e scripts/router-audit.mjs et ex√©cute‚Äële :

import fs from 'node:fs'
import path from 'node:path'

const PAGES = [
  'pages/Home.tsx','pages/Home.jsx',
  'pages/missions/Missions.tsx','pages/missions/Missions.jsx',
  'pages/missions/MissionNew.tsx','pages/missions/MissionNew.jsx',
  'pages/missions/MissionDetail.tsx','pages/missions/MissionDetail.jsx',
  'pages/projects/Projects.tsx','pages/projects/Projects.jsx',
  'pages/projects/ProjectNew.tsx','pages/projects/ProjectNew.jsx',
  'pages/projects/ProjectDetail.tsx','pages/projects/ProjectDetail.jsx',
  'pages/NotFound.tsx','pages/NotFound.jsx'
].map(p => path.join('src', p))

const ensure = (fp, name) => {
  if (!fs.existsSync(path.dirname(fp))) fs.mkdirSync(path.dirname(fp), { recursive: true })
  if (!fs.existsSync(fp)) {
    fs.writeFileSync(fp, `export default function ${name}(){return <div style={{padding:20}}>${name}</div>}\n`)
    console.log('Created', fp)
  } else {
    const src = fs.readFileSync(fp,'utf8')
    if (!/export\s+default\s+function|export\s+default\s+\w+/.test(src)) {
      fs.writeFileSync(fp, src + `\nexport default function ${name}(){return <div style={{padding:20}}>${name}</div>}\n`)
      console.log('Patched export default in', fp)
    }
  }
}

for (const fp of PAGES) {
  const name = path.basename(fp).replace(/\.(t|j)sx?$/,'')
  ensure(fp, name)
}
console.log('Router audit done.')

Ex√©cute :

node scripts/router-audit.mjs


‚∏ª

5) Remplacer <a href> internes par <Link to>

Cr√©e scripts/fix-links.mjs :

import fs from 'node:fs'; import path from 'node:path'
const ROOT='src', files=[]
function walk(d){for(const n of fs.readdirSync(d)){const p=path.join(d,n);const s=fs.statSync(p);if(s.isDirectory())walk(p);else if(/\.(tsx?|jsx?)$/.test(n))files.push(p)}}
walk(ROOT)
let changed=0
for(const f of files){
  let src=fs.readFileSync(f,'utf8')
  if(/\<a\s+href="\/(missions|projects|404|$)"/.test(src)){
    if(!/from\s+'react-router-dom'/.test(src)) src = `import { Link } from 'react-router-dom'\n`+src
    src = src.replace(/\<a\s+href="(\/[^"]+)"\s*\>/g, '<Link to="$1">').replace(/\<\/a\>/g,'</Link>')
    fs.writeFileSync(f,src,'utf8'); changed++; console.log('Updated links in', f)
  }
}
console.log('Done. files changed:',changed)

Ex√©cute :

node scripts/fix-links.mjs


‚∏ª

6) Vite config & fallback SPA serveur
	‚Ä¢	vite.config.ts (ou .js) :

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
export default defineConfig({
  plugins:[react()],
  server:{ host:true, strictPort:true, port:Number(process.env.PORT)||5173 },
  preview:{ host:true, strictPort:true, port:Number(process.env.PORT)||5173 },
  base:'/'
})

	‚Ä¢	Si backend Express sert la prod, assure :

import path from 'node:path'
import express from 'express'
const app = express()
const dist = path.resolve('dist')
app.use(express.static(dist))
app.get('*', (_req,res) => res.sendFile(path.join(dist,'index.html')))

Ce catch‚Äëall emp√™che le 404 serveur sur des routes front (SPA).

‚∏ª

7) Redirections apr√®s cr√©ation (s√©curis√©es)

Dans src/pages/missions/MissionNew.tsx et src/pages/projects/ProjectNew.tsx, redirige via useNavigate vers l‚ÄôID retourn√© (si l‚ÄôAPI r√©pond 201 + {id}) :

import { useNavigate } from 'react-router-dom'
import { paths } from '../../routes/paths'
const nav = useNavigate()
/* apr√®s POST */
nav(paths.missionDetail(data.id), { replace:true }) // ou projectDetail


‚∏ª

8) Tests e2e (sanity routing)

Installe si besoin :

npm i -D @playwright/test && npx playwright install --with-deps

Cr√©e e2e/routing.spec.ts :

import { test, expect } from '@playwright/test'
test('routes cl√©s existent', async ({ page }) => {
  for (const url of ['/', '/missions', '/missions/new', '/projects', '/projects/new']) {
    await page.goto(url)
    await expect(page).toHaveURL(new RegExp(url.replace(/\//g,'\\/')+'$'))
  }
})

package.json ‚Üí "test:e2e":"playwright test"

‚∏ª

9) Lancement & validation

rm -rf node_modules
npm install
npm run dev

Crit√®res d‚Äôacceptation :
	‚Ä¢	Les pages /missions, /missions/new, /projects, /projects/new s‚Äôaffichent (plus de 404).
	‚Ä¢	Les pages Detail existent si l‚ÄôID est correct.
	‚Ä¢	Aucune navigation interne via <a href="/‚Ä¶"> ne provoque 404 (toutes converties en <Link>).
	‚Ä¢	En prod/preview, le catch‚Äëall renvoie bien index.html.

‚∏ª

10) Rapport final √† afficher
	‚Ä¢	Liste des fichiers cr√©√©s/modifi√©s : paths.ts, App.tsx, NotFound.tsx, scripts router-audit.mjs, fix-links.mjs, vite.config.*, pages auto‚Äëcr√©√©es/patched.
	‚Ä¢	D√©tection du routeur, version, et √©ventuelles pages manquantes corrig√©es.
	‚Ä¢	R√©sultat npm run dev (URL) et, si configur√©, r√©sultat des tests e2e.